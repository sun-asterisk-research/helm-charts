apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "common.names.fullname" . }}{{- if .Values.jobNameSuffix }}{{ include "common.tplvalues.render" (dict "value" .Values.jobNameSuffix "context" $) }}{{- end }}
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  annotations:
    checksum/init-db-script: {{ include (print $.Template.BasePath "/init-db-script.yaml") . | sha256sum }}
    checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
    {{- if .Values.commonAnnotations }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
    {{- end }}
spec:
  template:
    metadata:
      name: {{ template "common.names.fullname" . }}
      labels:
        {{- include "common.labels.standard" . | nindent 8 }}
    spec:
      {{- include "db-init.imagePullSecrets" . | indent 6 }}
      restartPolicy: Never
      containers:
      - name: init-db
        image: {{ template "db-init.image" . }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command:
        - bash
        args:
        - -c
        - |
          echo "[InitDB] Waiting for $DB_HOST:$DB_PORT."

          TIMEOUT=600
          tick=0

          while :
          do
            tick=$((tick+1))

            (echo -n > /dev/tcp/$DB_HOST/$DB_PORT) >/dev/null 2>&1
            result=$?

            if [[ $result -eq 0 ]]; then
                break
            fi

            if [[ $tick -ge TIMEOUT ]]; then
                echo "[InitDB] Timed out waiting for $DB_HOST:$DB_PORT."
                exit 1
            fi

            sleep 1
          done

          echo "[InitDB] $DB_HOST:$DB_PORT is reachable, running init db scripts."
          {{ tpl (.Files.Get (printf "scripts/%s-init.sh" .Values.dbType)) . | nindent 10 }}
          if [[ $? -eq 0 ]]; then
            echo "[InitDB] Script finished successfully."
          fi
        env:
        - name: DEBUG
          value: {{ .Values.debug | quote }}
        - name: SSL_MODE
          value: {{ index .Values .Values.dbType "sslMode" | quote }}
        {{- range $name, $value := .Values.extraEnvVars }}
        - name: {{ $name }}
          value: {{ $value | quote }}
        {{- end }}
        envFrom:
        - secretRef:
            name: {{ template "common.names.fullname" . }}
        volumeMounts:
        - mountPath: /opt/script
          name: init-db-script
      volumes:
      - name: init-db-script
        secret:
          secretName: {{ template "common.names.fullname" . }}-sql
