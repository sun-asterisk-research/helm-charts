global:
  image:
    imageRegistry: ""
    imagePullSecrets: []

nameOverride: ""
fullnameOverride: ""

clusterDomain: cluster.local

config:
  codecovYml: |
    setup:
      admins:
        - service: github
          username: username
  setup:
    loglvl: INFO
    codecovHost: ""
    codecovScheme: ""
    codecovUrl: ""
    codecovApiUrl: ""
    timeseries:
      enabled: false
    enterprise_license: ""
    http:
      cookie_secret: ""
  site:
    comment:
      layout: "reach,diff,flags,tree"
  github:
    ## e.g:
    ##   client_id: "Iv1.xxx"
    ##   client_secret: "secret
    client_id: ""
    client_secret: ""
    global_upload_token: ""
    webhook_secret: ""
    integration:
      id: ""
      pem: /home/codecov/github-app-private.key
  services:
    minio:
      host: ""
      port: ""
      bucket: ""
      region: ""
      verifySsl: false
      accessKeyId: ""
      secretAccessKey: ""
    postgres:
      database: "codecov"
      username: "codecov"
      password: ""
      host: ""
      port: 5432

secretFiles:
  github-app-private.key: |-
    -----BEGIN RSA PRIVATE KEY-----
    your-key
    -----END RSA PRIVATE KEY-----

extraEnvs: []

api:
  replicaCount: 1

  image:
    registry: docker.io
    repository: codecov/self-hosted-api
    tag: ""
    pullPolicy: IfNotPresent
    pullSecrets: []

  podAnnotations: {}

  podSecurityContext:
    enabled: true
    fsGroup: 101

  containerSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: 100
    runAsGroup: 101

  service:
    type: ClusterIP
    port: 80

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 2
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}

  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: [ ]

worker:
  replicaCount: 1

  image:
    registry: docker.io
    repository: codecov/self-hosted-worker
    tag: ""
    pullPolicy: IfNotPresent
    pullSecrets: []

  args:
  - worker

  podAnnotations: {}

  podSecurityContext:
    enabled: true
    fsGroup: 101

  containerSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: 100
    runAsGroup: 101

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 2
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: [ ]

gateway:
  replicaCount: 1

  image:
    registry: docker.io
    repository: codecov/self-hosted-gateway
    tag: ""
    pullPolicy: IfNotPresent
    pullSecrets: []

  podAnnotations: {}

  podSecurityContext:
    enabled: false

  containerSecurityContext:
    enabled: false
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 80

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 2
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}

  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: [ ]

frontend:
  replicaCount: 1

  image:
    registry: docker.io
    repository: codecov/self-hosted-frontend
    tag: ""
    pullPolicy: IfNotPresent
    pullSecrets: []

  podAnnotations: {}

  podSecurityContext:
    enabled: false

  containerSecurityContext:
    enabled: false
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 80

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 2
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}

  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: [ ]

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
  hostname: codecov.local
  path: /
  pathType: ImplementationSpecific
  tls: false
  extraHosts: []
  extraTls: []

redis:
  enabled: false

postgresql:
  enabled: false
  image:
    tag: 14.5.0-debian-11-r29
  auth:
    database: "codecov"
    username: codecov
    password: "secret"
    postgresPassword: "secret"

timescaledb:
  enabled: false
  fullnameOverride: "codecov-timescaledb"
  replicaCount: 1
  image:
    pullPolicy: IfNotPresent
  secrets:
    # This map should contain environment variables that influence Patroni,
    # for example PATRONI_SUPERUSER_PASSWORD or PATRONI_REPLICATION_PASSWORD
    # https://patroni.readthedocs.io/en/latest/ENVIRONMENT.html#postgresql
    credentials:
      PATRONI_SUPERUSER_PASSWORD: "testpassword"
      PATRONI_REPLICATION_PASSWORD: "testpassword"
      PATRONI_admin_PASSWORD: "testpassword"
  # disable ssl as codecov does not support it
  persistentVolumes:
    data:
      enabled: false
    wal:
      enabled: false

minio:
  enabled: false
  auth:
    rootUser: minioadmin
    rootPassword: minioadmin
  defaultBuckets: minio
